package yt

import (
	"fmt"

	"google.golang.org/api/youtube/v3"
)

type Pl struct {
	s *youtube.Service
}

func NewPl(s *youtube.Service) YtPl {
	return &Pl{
		s: s,
	}
}

func (p *Pl) FindByID(id string) (*youtube.Playlist, error) {
	r, err := p.s.Playlists.List([]string{"snippet"}).
		Id(id).
		Do()
	if err != nil {
		return nil, fmt.Errorf("unable to call playlists: %v", err)
	}
	if len(r.Items) == 0 {
		return nil, fmt.Errorf("no playlists found")
	}
	return r.Items[0], nil
}

func (p *Pl) ItemsId(id string) ([]string, error) {
	r, err := p.s.PlaylistItems.List([]string{"contentDetails"}).
		PlaylistId(id).
		Do()
	if err != nil {
		return nil, fmt.Errorf("unable to get playlist items: %v", err)
	}

	var result []string
	for _, item := range r.Items {
		result = append(result, item.ContentDetails.VideoId)
	}
	return result, nil
}

func (p *Pl) FindByTitle(title string) (*youtube.Playlist, error) {
	r, err := p.s.Playlists.List([]string{"snippet"}).
		Mine(true).
		MaxResults(100).
		Do()
	if err != nil {
		return nil, err
	}
	for _, item := range r.Items {
		if item.Snippet.Title == title {
			return item, nil
		}
	}
	return nil, nil
}

func (p *Pl) Create(title string) (*youtube.Playlist, error) {
	newPl := &youtube.Playlist{
		Snippet: &youtube.PlaylistSnippet{
			Title:       title,
			Description: "Generated by Ordnung",
			// TODO Description: "Generated by Ordnung",
		},
		Status: &youtube.PlaylistStatus{PrivacyStatus: "private"},
	}
	item, err := p.s.Playlists.Insert([]string{"snippet", "status"}, newPl).
		Do()
	if err != nil {
		return nil, err
	}
	return item, nil
}

func (p *Pl) AddItem(id, videoID string, position int64) error {
	item := &youtube.PlaylistItem{
		Snippet: &youtube.PlaylistItemSnippet{
			PlaylistId: id,
			ResourceId: &youtube.ResourceId{
				Kind:    "youtube#video",
				VideoId: videoID,
			},
			Position: position,
		},
	}
	_, err := p.s.PlaylistItems.Insert([]string{"snippet"}, item).
		Do()
	return err
}

func (p *Pl) RemoveItem(id, videoID string) error {
	var nextPageToken string
	for {
		call := p.s.PlaylistItems.List([]string{"id", "snippet"}).
			PlaylistId(id).
			MaxResults(100)
		if nextPageToken != "" {
			call = call.PageToken(nextPageToken)
		}
		resp, err := call.Do()
		if err != nil {
			return fmt.Errorf("не удалось получить элементы плейлиста: %v", err)
		}

		for _, item := range resp.Items {
			if item.Snippet.ResourceId.VideoId == videoID {
				if err := p.s.PlaylistItems.Delete(item.Id).Do(); err != nil {
					return fmt.Errorf("не удалось удалить элемент %s: %v", item.Id, err)
				}
				return nil
			}
		}

		if resp.NextPageToken == "" {
			break
		}
		nextPageToken = resp.NextPageToken
	}

	return fmt.Errorf("no video %s in %s", videoID, id)
}
